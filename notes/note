1.引入组件的启动器
2.覆盖默认配置
3.在引导类上添加注解，开发相关组件

1.架构的演变
传统架构-->水平拆分-->垂直拆分（最早的分布式）-->soa(dubbo)-->微服务(springCloud)

2.远程调用技术：rpc http
rpc协议：自定义数据格式，限定技术，传输速度快，效率高 tcp，dubbo
http协议：统一的数据格式，不限定技术 rest接口  tcp协议 springCloud

2.1 Http客户端工具:- HttpClient  - OKHttp   - URLConnection

2.2 Spring的RestTemplate :pring提供了一个RestTemplate模板工具类，对基于Http的客户端进行了封装，并且实现了对象与json的序列化和反序列化，非常方便

3.什么是springCloud
微服务架构的解决方案，是很多组件的集合
Netflix:
eureka：注册中心，服务的注册与发现
zull：网关协议，路由请求，过滤器（ribbon hystrix）
ribbon：负载均衡组件
hystrix：熔断组件
feign：远程调用组件(ribbon hystrix)

3.1 注意：使用springcloud的依赖问题：springboot是springcloud的一个组件，必须对应

springboot =》springcloud

1.5.14.RELEASE =》Edgware.SR4
2.0.4.RELEASE  =》Finchley.SR1
2.0.4.BUILD-SNAPSHOT  =》Finchley.BUILD-SNAPSHOT
2.0.6.RELEASE  =》Finchley.SR2


*4.eureka
注册中心：itcast-eureka（
1.引入启动器，
2.配置spring.application.name=itcast-eureka
3.在引导类上@EnableEurekaServer）

客户端：itcast-service-provider 和  itcast-service-consumer
（
	1.引入启动器
	2.配置spring.application.name eureka.client.service-url.defaultZone=http://localhost:10086/eureka
	3.@EnableDiscoveryClient(启用eure客户端)）



1.引入启动器
2.覆盖默认配置
3.在引导类上启用组件

1.高可用 itcast-eureka
10086 10087

2.心跳过期 itcast-service-provider
eureka：
	instance:
		lease-renewal-interval-in-seconds: 5 # 心跳时间
		lease-expiration-duration-in-seconds: 15 # 过期时间

3.拉取服务的间隔时间 itcast-service-consumer
eureka:
  client:
    registry-fetch-interval-seconds: 5

4.关闭自我保护，定期清除无效连接
eureka:
  server:
    eviction-interval-timer-in-ms: 5000
    enable-self-preservation: false
----------------------
ribbon: 负载均衡组件
	1.eureka集成了
	2.@LoadBalanced：开启负载均衡
	3.this.restTemplate.getForObject("http://service-provider/user/" + id, User.class);
------------------------
hystrix：容错组件
	降级：检查每次请求，是否请求超时，或者连接池已满
		1.在服务消费者引入hystrix启动器
		2.熔断时间，默认1s， 6s
		3.在引导类上添加了一个注解：@EnableCircuitBreaker  {@SpringCloudApplication相当于三个注解}
		4.定义熔断方法：局部（要和被熔断的方法返回值和参数列表一致）  全局（返回值类型要被熔断的方法一致，参数列表必须为空）
		5.@HystrixCommand(fallbackMethod="局部熔断方法名")：声明被熔断的方法
		6.@DefaultProperties(defaultFallback="全局熔断方法名")
	熔断：不再发送请求
		1.close：闭合状态，所有请求正常方法
		2.open：打开状态，所有请求都无法访问。如果在一定时间内容，失败的比例不小于50%或者次数不少于20次
		3.half open：半开状态，打开状态默认5s休眠期，在休眠期所有请求无法正常访问。过了休眠期会进入半开状态，放部分请求通过
---------------------------------
feign
	1.引入openFeign启动器
	2.feign.hystrix.enable=true,开启feign的熔断功能
	3.在引导类上 @EnableFeignClients
	4.创建一个接口，在接口添加@FeignClient(value="服务id", fallback=实现类.class)
	5.在接口中定义一些方法，这些方法的书写方式跟之前controller类似
	6.创建了一个熔断类，实现feign接口，实现对应的方法，这些实现方法就是熔断方法
----------------------------------------
zuul
	1.引入zuul的启动器
	2.配置：
		zuul.routes.<路由名称>.path=/service-provider/**
		zuul.routes.<路由名称>.url=http://localhost:8082

		zuul.routes.<路由名称>.path=/service-provider/**
		zuul.routes.<路由名称>.serviceId=service-provider

		zuul.routes.服务名=/service-provider/**   推荐这种  service-provider也可以换成其他的名字

		不用配置，默认就是服务id开头路径

	3.@EnableZuulProxy

	过滤器：
		创建一个类继承ZuulFilter基类
		重写四个方法
			filterType：pre route post error
			filterOrder：返回值越小优先级越高
			shouldFilter：是否执行run方法。true执行
			run：具体的拦截逻辑

	   如果想过滤器返回的是中文，就在yml配置里面配置编码格式

	   http:    #过滤器中文乱码问题
           encoding:
             charset: gbk    #声明编码格式
             enabled: true     #启动编码
             force: true       #强制编码



eg：下面是run方法，其他方法看案列

   public Object run() throws ZuulException {
          //初始化context 上下文对象，servlet spring
          RequestContext currentContext = RequestContext.getCurrentContext();

          //获取request对象
          HttpServletRequest request = currentContext.getRequest();

          //获取参数
          String token = request.getParameter("token");

          if (StringUtils.isBlank(token)) {
              //拦截，不转发请求
              currentContext.setSendZuulResponse(false);
              //响应状态码，401-身份未认证
              currentContext.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);
              currentContext.setResponseBody("李斌狗贼，哪里逃，休走...");
          }

          //返回null,就代表过滤器啥都不做
          return null;
      }












